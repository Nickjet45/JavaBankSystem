/**
 * 
 */

/**
 * @author Nick
 * @version 1.0
 *
 */
public class LoginSystem{
	private String firstName; //Holds the first name of the user
	private String lastName; //Holds the last name of the user
	private String userName; //Combination of first and last name of user
	private int userPIN; //Special PIN generated by user to login with
	private double currentBalance = 0; //Holds the current balance of the user
	private boolean toDelete = false; //Tracks whether user wishes to delete their account
	private boolean isLogined = false; //Tracks to see if the user has logined to their account yet
	
	/**
	 * 
	 * Default constructor that sets all parameters to be defaulted at None
	 * 
	 */
	
	LoginSystem(){
		firstName = "None";
		lastName = "None";
		userName = firstName + " " + lastName;
		userPIN = -1;
	}
	
	/**
	 * @param userFirst First name of the user
	 * @param userLast Last name of the user
	 * @param enteredPIN desired PIN of the user
	 * {@summary Constructor 3 parameter}
	 * Constructor that allows parameters to be defined upon creation
	 * Sets the username of the individual to be the combination of their first and last name
	 */
	
	LoginSystem(String userFirst, String userLast, int enteredPIN){
		firstName = userFirst;
		lastName = userLast;
		userPIN = enteredPIN;
		
		userName = userFirst + " " + lastName;
	}
	
	/**
	 * @return Returns the user's current Balance to the caller
	 */
	
	public double getBalance() {
		return currentBalance;
	}
	
	/**
	 * @param amountToDeposit Amount of money user wishes to deposit into their account
	 * {@summary depositMoney}
	 * Increases the user's current Balance by the amount passed through to the program
	 * If the user enters 0 or an invalid amount, print an error message
	 */
	
	public void depositMoney(double amountToDeposit){
		if(amountToDeposit <= 0) {
			System.out.println("Invalid amount entered for deposit, please retry again");
		}
		else {
			currentBalance += amountToDeposit;
		}
	}
	
	/**
	 * 
	 * @param amountToWithdraw Amount of cash user wishes to withdraw from their account
	 * {@summary withdrawMoney}
	 * Decreases the user's balance by the amount passed through to the program
	 * If the entered amount would put the user balance into the negative, print an error message
	 * telling them to retry, along with a statement showing their current balance
	 */
	
	public void withdrawMoney(double amountToWithdraw) {
		if((currentBalance - amountToWithdraw) < 0) {
			System.out.println("The amount you wish to withdraw would put your account into the negative, please enter a valid amount");
			System.out.println("Your current balance is: $" + currentBalance);
		}
		else {
			currentBalance -= amountToWithdraw;
		}
	}
	
	/**
	 *
	 * @return Returns if the user has logined in yet
	 * {@summary hasLogined}
	 * Returns true if the user has properly logined to their account, and false if not
	 * Used to ensure that users cannot withdraw money before they login
	 */
	
	public boolean hasLogined() {
		return isLogined;
	}
	
	/**
	 * @param enteredUserName -Username that the user has entered into the system
	 * @param enteredPIN -PIN number that the user has entered into the system
	 * {@summary loginUser}
	 * Logs the user in if the entered userName matches the userName stored in the system
	 * and if the entered userPIN matches the PIN stored in the system
	 */
	public void loginUser(String enteredUserName, int enteredPIN) {
		if((enteredUserName.equals(userName)) && (enteredPIN == userPIN)) {
			isLogined = true;
		}
		else {
			isLogined = false;
		}
	}
	
	
}